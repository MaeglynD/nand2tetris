// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		Mux16(a=instruction, b=outALU, sel=instruction[15], out=outmux);

		Not(in=instruction[15], out=isAInstruction);
		Or(a=isAInstruction, b=instruction[5], out=loadA);

		ARegister(in=outmux, load=loadA, out=regA, out[0..14]=addressM);

		And(a=instruction[15], b=instruction[12], out=selAM);
		Mux16(a=regA, b=inM, sel=selAM, out=AM);

		And(a=instruction[15], b=instruction[4], out=loadDReg);
		DRegister(in=outALU, load=loadDReg, out=regD);

		ALU(x=regD, y=AM, zr=zr, ng=ng, out=outALU, out=outM,
			zx=instruction[11],
			nx=instruction[10],
			zy=instruction[9],
			ny=instruction[8],
			f=instruction[7],
			no=instruction[6]
		);

		And(a=instruction[3], b=instruction[15], out=writeM);

		And(a=instruction[15], b=instruction[0], out=jgt);
		And(a=instruction[15], b=instruction[1], out=jeq);
		And(a=instruction[15], b=instruction[2], out=jlt);

		Not(in=ng, out=zeroOrGreater);
		Not(in=zr, out=notZero);
		And(a=zeroOrGreater, b=notZero, out=greaterThanZero);
		
		And(a=jeq, b=zr, out=pos1);
		And(a=jlt, b=ng, out=pos2);
		And(a=jgt, b=greaterThanZero, out=pos3);

		Or(a=pos1, b=pos2, out=posInterim);
		Or(a=pos3, b=posInterim, out=pcLoad);

		PC(in=regA, load=pcLoad, reset=reset, out[0..14]=pc, inc=true);
}